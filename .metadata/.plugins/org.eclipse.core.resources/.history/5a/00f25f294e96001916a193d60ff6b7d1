package com.qa.client;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.qa.utils.TestUtils;

public class RestClient {
	public String boardId, listId;

	// 1. GET Method without Headers:
	public CloseableHttpResponse getCard(String cardId , String key, String token)
			throws ClientProtocolException, IOException, URISyntaxException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		URIBuilder builder = new URIBuilder();
		System.out.println("Get card id is "+ cardId );
		builder.setScheme("https").setHost("api.trello.com/1").setPath("/cards/" + cardId).setParameter("key", key)
				.setParameter("token", token);
		URI uri = builder.build();
		HttpGet httpget = new HttpGet(uri);
		CloseableHttpResponse closebaleHttpResponse = httpClient.execute(httpget);
		return closebaleHttpResponse;

	}

	// 2.POST BOARDS

	public void postBoard(String key, String token) throws ClientProtocolException, IOException, URISyntaxException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		URIBuilder builder = new URIBuilder();
		builder.setScheme("https").setHost("api.trello.com/1").setPath("/boards/").setParameter("key", key)
				.setParameter("token", token).setParameter("name", "L");
		URI uri = builder.build();
		HttpPost httpget = new HttpPost(uri);
		CloseableHttpResponse closebaleHttpResponse = httpClient.execute(httpget);
		String responseString = EntityUtils.toString(closebaleHttpResponse.getEntity(), "UTF-8");
		JSONObject responseJson = new JSONObject(responseString);
		boardId = TestUtils.getValueByJPath(responseJson, "/id");
		System.out.println("Board ID is" + " " + boardId);

	}

	// 3.Post List

	public void postList(String key, String token) throws ClientProtocolException, IOException, URISyntaxException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		URIBuilder builder = new URIBuilder();
		builder.setScheme("https").setHost("api.trello.com/1").setPath("/lists/").setParameter("key", key)
				.setParameter("token", token).setParameter("name", "List1").setParameter("idBoard", boardId);
		URI uri = builder.build();
		HttpPost httpget = new HttpPost(uri);
		CloseableHttpResponse closebaleHttpResponse = httpClient.execute(httpget);
		String responseString = EntityUtils.toString(closebaleHttpResponse.getEntity(), "UTF-8");
		JSONObject responseJson = new JSONObject(responseString);
		listId = TestUtils.getValueByJPath(responseJson, "/id");
		System.out.println("List ID is" + " " + listId);
	}

	// 4.Post Card
	public CloseableHttpResponse postCard(String key, String token, String name)
			throws ClientProtocolException, IOException, URISyntaxException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		URIBuilder builder = new URIBuilder();
		builder.setScheme("https").setHost("api.trello.com/1").setPath("/cards/").setParameter("key", key)
				.setParameter("token", token).setParameter("name", name).setParameter("idList", listId);
		URI uri = builder.build();
		HttpPost httpget = new HttpPost(uri);
		CloseableHttpResponse closeableHttpResponse = httpClient.execute(httpget);
		return closeableHttpResponse;
	}

}
